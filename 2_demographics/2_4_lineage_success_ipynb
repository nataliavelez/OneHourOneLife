{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Compare success of different lineages\n",
    "Natalia VÃ©lez, July 2020<br />\n",
    "Last updated April 2021\n",
    "\n",
    "Now that we've built a graph representation of family trees, we'll use it to compare lineages and operationalize a success measure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os, re, glob, datetime, json, sys\n",
    "from os.path import join as opj\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy.stats\n",
    "from tqdm import notebook\n",
    "\n",
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from networkx.drawing.nx_agraph import graphviz_layout\n",
    "\n",
    "sys.path.append('..')\n",
    "from utils import gsearch, int_extract\n",
    "\n",
    "sns.set_context('talk')\n",
    "sns.set_style('white')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set up data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The format of the maplogs changed at some point during the boundless era; after this point, each change to the map was tagged with an avatar ID. We want to analyze families that started after the launch of this new maplog format and died out before we downloaded the data.\n",
    "\n",
    "Find starting time:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 17 seed files\n",
      "Starting lifelogs at: Sat Nov 16 04:14:33 2019\n",
      "1573895673\n",
      "1574102503\n",
      "1576038671\n",
      "1578345720\n",
      "1578354747\n",
      "1579713519\n",
      "1580144896\n",
      "1581985139\n",
      "1583642903\n",
      "1584061484\n",
      "1585440511\n",
      "1585512770\n",
      "1585603481\n",
      "1587166656\n",
      "1603997647\n",
      "1608411674\n",
      "1609170451\n"
     ]
    }
   ],
   "source": [
    "data_dir = '../../data/publicMapChangeData/bigserver2.onehouronelife.com/'\n",
    "seed_f = gsearch(opj(data_dir, '*mapSeed.txt'))\n",
    "seed_t = [int_extract('[0-9]+(?=time)', f) for f in seed_f]\n",
    "seed_t.sort()\n",
    "\n",
    "start_t = seed_t[0]\n",
    "\n",
    "print('Found %i seed files' % len(seed_t))\n",
    "print('Starting lifelogs at: %s' % datetime.datetime.fromtimestamp(start_t).strftime('%c'))\n",
    "print(*seed_t, sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load lifelog data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/numpy/lib/arraysetops.py:580: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>avatar</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>parent</th>\n",
       "      <th>birth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>death</th>\n",
       "      <th>age</th>\n",
       "      <th>cause_of_death</th>\n",
       "      <th>birthX</th>\n",
       "      <th>birthY</th>\n",
       "      <th>deathX</th>\n",
       "      <th>deathY</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5ab4f808b01db8bab564fa726ca7dd0439205d4a</td>\n",
       "      <td>4108849</td>\n",
       "      <td>1617678319</td>\n",
       "      <td>4108781</td>\n",
       "      <td>[-13743    -77]</td>\n",
       "      <td>1.617679e+09</td>\n",
       "      <td>[-13797   -104]</td>\n",
       "      <td>3.59</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-13743</td>\n",
       "      <td>-77</td>\n",
       "      <td>-13797.0</td>\n",
       "      <td>-104.0</td>\n",
       "      <td>TED</td>\n",
       "      <td>GFELL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5ab4f808b01db8bab564fa726ca7dd0439205d4a</td>\n",
       "      <td>4108848</td>\n",
       "      <td>1617678300</td>\n",
       "      <td>4108786</td>\n",
       "      <td>[-15498    362]</td>\n",
       "      <td>1.617678e+09</td>\n",
       "      <td>[-15498    362]</td>\n",
       "      <td>0.22</td>\n",
       "      <td>disconnect</td>\n",
       "      <td>-15498</td>\n",
       "      <td>362</td>\n",
       "      <td>-15498.0</td>\n",
       "      <td>362.0</td>\n",
       "      <td>HERA</td>\n",
       "      <td>POLLY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>dadea1a71832326c598df59059cf42102e979707</td>\n",
       "      <td>4108842</td>\n",
       "      <td>1617678238</td>\n",
       "      <td>4108778</td>\n",
       "      <td>[-15498    362]</td>\n",
       "      <td>1.617680e+09</td>\n",
       "      <td>[-15502    363]</td>\n",
       "      <td>22.16</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-15498</td>\n",
       "      <td>362</td>\n",
       "      <td>-15502.0</td>\n",
       "      <td>363.0</td>\n",
       "      <td>SPARTAN</td>\n",
       "      <td>POLLY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>328dc412f542693dc20d084e99a7367e4fe4aae4</td>\n",
       "      <td>4108839</td>\n",
       "      <td>1617678208</td>\n",
       "      <td>4108784</td>\n",
       "      <td>[-13754    -85]</td>\n",
       "      <td>1.617682e+09</td>\n",
       "      <td>[-13765    -64]</td>\n",
       "      <td>60.00</td>\n",
       "      <td>oldAge</td>\n",
       "      <td>-13754</td>\n",
       "      <td>-85</td>\n",
       "      <td>-13765.0</td>\n",
       "      <td>-64.0</td>\n",
       "      <td>SERANA</td>\n",
       "      <td>GFELL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>e65b7bfa037a3287869cb682b648c68e52ad05d4</td>\n",
       "      <td>4108837</td>\n",
       "      <td>1617678173</td>\n",
       "      <td>4108782</td>\n",
       "      <td>[-15796   -205]</td>\n",
       "      <td>1.617679e+09</td>\n",
       "      <td>[-15803   -204]</td>\n",
       "      <td>14.85</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-15796</td>\n",
       "      <td>-205</td>\n",
       "      <td>-15803.0</td>\n",
       "      <td>-204.0</td>\n",
       "      <td>TJ</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     player   avatar      tBirth   parent  \\\n",
       "0  5ab4f808b01db8bab564fa726ca7dd0439205d4a  4108849  1617678319  4108781   \n",
       "1  5ab4f808b01db8bab564fa726ca7dd0439205d4a  4108848  1617678300  4108786   \n",
       "2  dadea1a71832326c598df59059cf42102e979707  4108842  1617678238  4108778   \n",
       "3  328dc412f542693dc20d084e99a7367e4fe4aae4  4108839  1617678208  4108784   \n",
       "4  e65b7bfa037a3287869cb682b648c68e52ad05d4  4108837  1617678173  4108782   \n",
       "\n",
       "             birth        tDeath            death    age cause_of_death  \\\n",
       "0  [-13743    -77]  1.617679e+09  [-13797   -104]   3.59         hunger   \n",
       "1  [-15498    362]  1.617678e+09  [-15498    362]   0.22     disconnect   \n",
       "2  [-15498    362]  1.617680e+09  [-15502    363]  22.16       murdered   \n",
       "3  [-13754    -85]  1.617682e+09  [-13765    -64]  60.00         oldAge   \n",
       "4  [-15796   -205]  1.617679e+09  [-15803   -204]  14.85       murdered   \n",
       "\n",
       "   birthX  birthY   deathX  deathY    first   last  \n",
       "0  -13743     -77 -13797.0  -104.0      TED  GFELL  \n",
       "1  -15498     362 -15498.0   362.0     HERA  POLLY  \n",
       "2  -15498     362 -15502.0   363.0  SPARTAN  POLLY  \n",
       "3  -13754     -85 -13765.0   -64.0   SERANA  GFELL  \n",
       "4  -15796    -205 -15803.0  -204.0       TJ    NaN  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_eras = pd.read_csv('outputs/all_lifelogs_compact.tsv', sep='\\t', index_col=0)\n",
    "all_eras.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load families & find families that started after the new maplog format:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/numpy/lib/arraysetops.py:580: FutureWarning: elementwise comparison failed; returning scalar instead, but in the future will perform elementwise comparison\n",
      "  mask |= (ar1 == a)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total families: 14874\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "      <th>start_t</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>49989</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>19</td>\n",
       "      <td>1573895755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49990</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>3</td>\n",
       "      <td>1573895904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49991</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>36</td>\n",
       "      <td>1573896101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49992</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>71</td>\n",
       "      <td>1573896134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49993</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>496</td>\n",
       "      <td>1573896495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         family  avatar     start_t\n",
       "49989  time-1573895755_eve-2276905_name-ZABICKI      19  1573895755\n",
       "49990   time-1573895904_eve-2276911_name-ROHRER       3  1573895904\n",
       "49991     time-1573896101_eve-2276917_name-BADA      36  1573896101\n",
       "49992   time-1573896134_eve-2276919_name-SARINA      71  1573896134\n",
       "49993  time-1573896495_eve-2276927_name-LISSADE     496  1573896495"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fam_df = pd.read_csv('outputs/family_playerID.tsv', sep='\\t', index_col=0)\n",
    "in_era = fam_df.groupby('family')['avatar'].agg('count').reset_index()\n",
    "in_era['start_t'] = in_era.family.apply(lambda f: int_extract('(?<=time-)[0-9]+', f))\n",
    "\n",
    "# Trim families that started before the new map logs\n",
    "in_era = in_era[in_era['start_t'] >= start_t]\n",
    "\n",
    "print('Total families: %i' % in_era.shape[0])\n",
    "in_era.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove incomplete families (i.e., lineages that were still alive at the time of the data download)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 13 incomplete families\n",
      "14861 families remaining\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "      <th>start_t</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>19</td>\n",
       "      <td>1573895755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>3</td>\n",
       "      <td>1573895904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>36</td>\n",
       "      <td>1573896101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>71</td>\n",
       "      <td>1573896134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>496</td>\n",
       "      <td>1573896495</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family  avatar     start_t\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI      19  1573895755\n",
       "1   time-1573895904_eve-2276911_name-ROHRER       3  1573895904\n",
       "2     time-1573896101_eve-2276917_name-BADA      36  1573896101\n",
       "3   time-1573896134_eve-2276919_name-SARINA      71  1573896134\n",
       "4  time-1573896495_eve-2276927_name-LISSADE     496  1573896495"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "filtered_fams = pd.merge(in_era[['family']], fam_df, how='left')\n",
    "filtered_lifelogs = pd.merge(filtered_fams, all_eras)\n",
    "\n",
    "idx = filtered_lifelogs.groupby(['family'])['tBirth'].transform(max) == filtered_lifelogs['tBirth']\n",
    "last_descendants = filtered_lifelogs[idx].copy()\n",
    "complete_fams = last_descendants.groupby('family')['tDeath'].agg(lambda group: all(np.isfinite(group))).reset_index()\n",
    "complete_fams = complete_fams[complete_fams.tDeath]\n",
    "complete_fams = pd.merge(complete_fams[['family']], in_era)\n",
    "\n",
    "print('Removed %i incomplete families' % (in_era.shape[0] - complete_fams.shape[0]))\n",
    "print('%i families remaining' % complete_fams.shape[0])\n",
    "complete_fams.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exclude infant births from lifelogs:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 64359 infant disconnects\n",
      "(712313, 16)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "      <th>player</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>parent</th>\n",
       "      <th>birth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>death</th>\n",
       "      <th>age</th>\n",
       "      <th>cause_of_death</th>\n",
       "      <th>birthX</th>\n",
       "      <th>birthY</th>\n",
       "      <th>deathX</th>\n",
       "      <th>deathY</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276941</td>\n",
       "      <td>c6ed44a5ce9e67f2c5a34f32be544edd78cbe601</td>\n",
       "      <td>1573897198</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5114 -1399]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5153 -1379]</td>\n",
       "      <td>25.79</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5114</td>\n",
       "      <td>-1399</td>\n",
       "      <td>-5153.0</td>\n",
       "      <td>-1379.0</td>\n",
       "      <td>SAMMY</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276935</td>\n",
       "      <td>e7098854c1756fbc047243a7376e1c0dbd99b35d</td>\n",
       "      <td>1573896961</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5130 -1408]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5131 -1383]</td>\n",
       "      <td>28.37</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5130</td>\n",
       "      <td>-1408</td>\n",
       "      <td>-5131.0</td>\n",
       "      <td>-1383.0</td>\n",
       "      <td>CUCA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276922</td>\n",
       "      <td>0c7bc0236deae0bb888f63c4f4d94f4ab7cefad1</td>\n",
       "      <td>1573896361</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5124 -1406]</td>\n",
       "      <td>1.573897e+09</td>\n",
       "      <td>[-5132 -1395]</td>\n",
       "      <td>9.73</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-5124</td>\n",
       "      <td>-1406</td>\n",
       "      <td>-5132.0</td>\n",
       "      <td>-1395.0</td>\n",
       "      <td>HANA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276914</td>\n",
       "      <td>e417361f8e2770a2a5647353af05f6e621be69c0</td>\n",
       "      <td>1573895976</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5133 -1397]</td>\n",
       "      <td>1.573898e+09</td>\n",
       "      <td>[-5122 -1400]</td>\n",
       "      <td>41.77</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5133</td>\n",
       "      <td>-1397</td>\n",
       "      <td>-5122.0</td>\n",
       "      <td>-1400.0</td>\n",
       "      <td>NYANA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276909</td>\n",
       "      <td>b0527ef2371111cb11369f4a5fe021c1bdb06ed9</td>\n",
       "      <td>1573895873</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5121 -1398]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5107 -1389]</td>\n",
       "      <td>45.99</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5121</td>\n",
       "      <td>-1398</td>\n",
       "      <td>-5107.0</td>\n",
       "      <td>-1389.0</td>\n",
       "      <td>MASA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family   avatar  \\\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI  2276941   \n",
       "1  time-1573895755_eve-2276905_name-ZABICKI  2276935   \n",
       "3  time-1573895755_eve-2276905_name-ZABICKI  2276922   \n",
       "5  time-1573895755_eve-2276905_name-ZABICKI  2276914   \n",
       "6  time-1573895755_eve-2276905_name-ZABICKI  2276909   \n",
       "\n",
       "                                     player      tBirth   parent  \\\n",
       "0  c6ed44a5ce9e67f2c5a34f32be544edd78cbe601  1573897198  2276905   \n",
       "1  e7098854c1756fbc047243a7376e1c0dbd99b35d  1573896961  2276905   \n",
       "3  0c7bc0236deae0bb888f63c4f4d94f4ab7cefad1  1573896361  2276905   \n",
       "5  e417361f8e2770a2a5647353af05f6e621be69c0  1573895976  2276905   \n",
       "6  b0527ef2371111cb11369f4a5fe021c1bdb06ed9  1573895873  2276905   \n",
       "\n",
       "           birth        tDeath          death    age cause_of_death  birthX  \\\n",
       "0  [-5114 -1399]  1.573899e+09  [-5153 -1379]  25.79       murdered   -5114   \n",
       "1  [-5130 -1408]  1.573899e+09  [-5131 -1383]  28.37       murdered   -5130   \n",
       "3  [-5124 -1406]  1.573897e+09  [-5132 -1395]   9.73         hunger   -5124   \n",
       "5  [-5133 -1397]  1.573898e+09  [-5122 -1400]  41.77       murdered   -5133   \n",
       "6  [-5121 -1398]  1.573899e+09  [-5107 -1389]  45.99       murdered   -5121   \n",
       "\n",
       "   birthY  deathX  deathY  first     last  \n",
       "0   -1399 -5153.0 -1379.0  SAMMY  ZABICKI  \n",
       "1   -1408 -5131.0 -1383.0   CUCA  ZABICKI  \n",
       "3   -1406 -5132.0 -1395.0   HANA  ZABICKI  \n",
       "5   -1397 -5122.0 -1400.0  NYANA  ZABICKI  \n",
       "6   -1398 -5107.0 -1389.0   MASA  ZABICKI  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complete_descendants = pd.merge(complete_fams[['family']], fam_df)\n",
    "\n",
    "infant_lifelogs = pd.merge(complete_descendants, all_eras)\n",
    "noninfant_lifelogs = infant_lifelogs[(infant_lifelogs['cause_of_death'] != 'disconnect') & (infant_lifelogs['age'] > 2)]\n",
    "\n",
    "print('Removed %i infant disconnects' % (infant_lifelogs.shape[0] - noninfant_lifelogs.shape[0]))\n",
    "print(noninfant_lifelogs.shape)\n",
    "noninfant_lifelogs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Remove singleton families:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Removed 8684 singleton families\n",
      "6177 families remaining\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>440</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family  avatar\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI      16\n",
       "1   time-1573895904_eve-2276911_name-ROHRER       3\n",
       "2     time-1573896101_eve-2276917_name-BADA      32\n",
       "3   time-1573896134_eve-2276919_name-SARINA      63\n",
       "4  time-1573896495_eve-2276927_name-LISSADE     440"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_families = noninfant_lifelogs.groupby('family')['avatar'].agg('count').reset_index()\n",
    "final_families = final_families[final_families.avatar > 1]\n",
    "\n",
    "print('Removed %i singleton families' % (complete_fams.shape[0] - final_families.shape[0]))\n",
    "print('%i families remaining' % final_families.shape[0])\n",
    "final_families.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Filter singleton families out of lifelogs:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(712313, 16)\n",
      "(703653, 16)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "      <th>player</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>parent</th>\n",
       "      <th>birth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>death</th>\n",
       "      <th>age</th>\n",
       "      <th>cause_of_death</th>\n",
       "      <th>birthX</th>\n",
       "      <th>birthY</th>\n",
       "      <th>deathX</th>\n",
       "      <th>deathY</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276941</td>\n",
       "      <td>c6ed44a5ce9e67f2c5a34f32be544edd78cbe601</td>\n",
       "      <td>1573897198</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5114 -1399]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5153 -1379]</td>\n",
       "      <td>25.79</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5114</td>\n",
       "      <td>-1399</td>\n",
       "      <td>-5153.0</td>\n",
       "      <td>-1379.0</td>\n",
       "      <td>SAMMY</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276935</td>\n",
       "      <td>e7098854c1756fbc047243a7376e1c0dbd99b35d</td>\n",
       "      <td>1573896961</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5130 -1408]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5131 -1383]</td>\n",
       "      <td>28.37</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5130</td>\n",
       "      <td>-1408</td>\n",
       "      <td>-5131.0</td>\n",
       "      <td>-1383.0</td>\n",
       "      <td>CUCA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276922</td>\n",
       "      <td>0c7bc0236deae0bb888f63c4f4d94f4ab7cefad1</td>\n",
       "      <td>1573896361</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5124 -1406]</td>\n",
       "      <td>1.573897e+09</td>\n",
       "      <td>[-5132 -1395]</td>\n",
       "      <td>9.73</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-5124</td>\n",
       "      <td>-1406</td>\n",
       "      <td>-5132.0</td>\n",
       "      <td>-1395.0</td>\n",
       "      <td>HANA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276914</td>\n",
       "      <td>e417361f8e2770a2a5647353af05f6e621be69c0</td>\n",
       "      <td>1573895976</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5133 -1397]</td>\n",
       "      <td>1.573898e+09</td>\n",
       "      <td>[-5122 -1400]</td>\n",
       "      <td>41.77</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5133</td>\n",
       "      <td>-1397</td>\n",
       "      <td>-5122.0</td>\n",
       "      <td>-1400.0</td>\n",
       "      <td>NYANA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>2276909</td>\n",
       "      <td>b0527ef2371111cb11369f4a5fe021c1bdb06ed9</td>\n",
       "      <td>1573895873</td>\n",
       "      <td>2276905</td>\n",
       "      <td>[-5121 -1398]</td>\n",
       "      <td>1.573899e+09</td>\n",
       "      <td>[-5107 -1389]</td>\n",
       "      <td>45.99</td>\n",
       "      <td>murdered</td>\n",
       "      <td>-5121</td>\n",
       "      <td>-1398</td>\n",
       "      <td>-5107.0</td>\n",
       "      <td>-1389.0</td>\n",
       "      <td>MASA</td>\n",
       "      <td>ZABICKI</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family   avatar  \\\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI  2276941   \n",
       "1  time-1573895755_eve-2276905_name-ZABICKI  2276935   \n",
       "2  time-1573895755_eve-2276905_name-ZABICKI  2276922   \n",
       "3  time-1573895755_eve-2276905_name-ZABICKI  2276914   \n",
       "4  time-1573895755_eve-2276905_name-ZABICKI  2276909   \n",
       "\n",
       "                                     player      tBirth   parent  \\\n",
       "0  c6ed44a5ce9e67f2c5a34f32be544edd78cbe601  1573897198  2276905   \n",
       "1  e7098854c1756fbc047243a7376e1c0dbd99b35d  1573896961  2276905   \n",
       "2  0c7bc0236deae0bb888f63c4f4d94f4ab7cefad1  1573896361  2276905   \n",
       "3  e417361f8e2770a2a5647353af05f6e621be69c0  1573895976  2276905   \n",
       "4  b0527ef2371111cb11369f4a5fe021c1bdb06ed9  1573895873  2276905   \n",
       "\n",
       "           birth        tDeath          death    age cause_of_death  birthX  \\\n",
       "0  [-5114 -1399]  1.573899e+09  [-5153 -1379]  25.79       murdered   -5114   \n",
       "1  [-5130 -1408]  1.573899e+09  [-5131 -1383]  28.37       murdered   -5130   \n",
       "2  [-5124 -1406]  1.573897e+09  [-5132 -1395]   9.73         hunger   -5124   \n",
       "3  [-5133 -1397]  1.573898e+09  [-5122 -1400]  41.77       murdered   -5133   \n",
       "4  [-5121 -1398]  1.573899e+09  [-5107 -1389]  45.99       murdered   -5121   \n",
       "\n",
       "   birthY  deathX  deathY  first     last  \n",
       "0   -1399 -5153.0 -1379.0  SAMMY  ZABICKI  \n",
       "1   -1408 -5131.0 -1383.0   CUCA  ZABICKI  \n",
       "2   -1406 -5132.0 -1395.0   HANA  ZABICKI  \n",
       "3   -1397 -5122.0 -1400.0  NYANA  ZABICKI  \n",
       "4   -1398 -5107.0 -1389.0   MASA  ZABICKI  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_lifelogs = pd.merge(final_families[['family']], noninfant_lifelogs)\n",
    "print(noninfant_lifelogs.shape)\n",
    "print(final_lifelogs.shape)\n",
    "final_lifelogs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check full sample"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Final sample size calculation!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "N =\t6177 families\n",
      "\t703653 avatars\n",
      "\t38564 unique players\n"
     ]
    }
   ],
   "source": [
    "final_sample = final_lifelogs[['family', 'player', 'avatar']].agg('nunique')\n",
    "print('N =\\t%i families' % final_sample['family'])\n",
    "print('\\t%i avatars' % final_sample['avatar'])\n",
    "print('\\t%i unique players' % final_sample['player'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Save inclusions (we'll upload this at the end):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "inc_families = list(np.unique(final_lifelogs.family))\n",
    "inc_players = list(np.unique(final_lifelogs.player))\n",
    "inc_avatars = list(np.unique(final_lifelogs.avatar))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lives per player in current sample:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Median # lives: 4.00\n",
      "Min # lives: 1\n",
      "Max # lives: 2201\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "player_summ = final_lifelogs.groupby('player')['avatar'].agg('count').reset_index()\n",
    "player_summ = player_summ.rename(columns={'avatar': 'n'})\n",
    "player_summ.head()\n",
    "\n",
    "# Plot\n",
    "print('Median # lives: %0.2f' % np.median(player_summ['n']))\n",
    "print('Min # lives: %i' % np.min(player_summ['n']))\n",
    "print('Max # lives: %i' % np.max(player_summ['n']))\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "sns.distplot(np.log10(player_summ['n']),ax=ax)\n",
    "ax.set(xlabel='# lives (excluding disconnects)', xticks=range(4), xticklabels=[10**x for x in range(4)])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Start and end times:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First lineage starts at: 2019-11-16T04:15:55 \n",
      "Lineages end at: 2021-04-06T00:03:28 \n"
     ]
    }
   ],
   "source": [
    "t_fmt = '%Y-%m-%dT%H:%M:%S %Z'\n",
    "\n",
    "start_t = np.min(final_lifelogs['tBirth'])\n",
    "start_date = datetime.datetime.fromtimestamp(start_t).strftime(t_fmt)\n",
    "\n",
    "end_t = np.max(final_lifelogs['tDeath'])\n",
    "end_date = datetime.datetime.fromtimestamp(end_t).strftime(t_fmt)\n",
    "\n",
    "print('First lineage starts at: %s' % start_date)\n",
    "print('Lineages end at: %s' % end_date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the longest-lived lineage?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>duration_hours</th>\n",
       "      <th>duration_days</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1609746195_eve-3833245_name-STALLINS</td>\n",
       "      <td>1609746195</td>\n",
       "      <td>1.610329e+09</td>\n",
       "      <td>161.972222</td>\n",
       "      <td>6.748843</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1611138522_eve-3897231_name-LUCKY</td>\n",
       "      <td>1611138522</td>\n",
       "      <td>1.611671e+09</td>\n",
       "      <td>147.875833</td>\n",
       "      <td>6.161493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1611388293_eve-3906808_name-ARTEMENKO</td>\n",
       "      <td>1611388293</td>\n",
       "      <td>1.611867e+09</td>\n",
       "      <td>132.887778</td>\n",
       "      <td>5.536991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1610335007_eve-3864700_name-APRIL</td>\n",
       "      <td>1610335007</td>\n",
       "      <td>1.610808e+09</td>\n",
       "      <td>131.353889</td>\n",
       "      <td>5.473079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1607255144_eve-3661190_name-RED</td>\n",
       "      <td>1607255144</td>\n",
       "      <td>1.607709e+09</td>\n",
       "      <td>126.131667</td>\n",
       "      <td>5.255486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                       family      tBirth        tDeath  \\\n",
       "0   time-1609746195_eve-3833245_name-STALLINS  1609746195  1.610329e+09   \n",
       "1      time-1611138522_eve-3897231_name-LUCKY  1611138522  1.611671e+09   \n",
       "2  time-1611388293_eve-3906808_name-ARTEMENKO  1611388293  1.611867e+09   \n",
       "3      time-1610335007_eve-3864700_name-APRIL  1610335007  1.610808e+09   \n",
       "4        time-1607255144_eve-3661190_name-RED  1607255144  1.607709e+09   \n",
       "\n",
       "   duration_hours  duration_days  \n",
       "0      161.972222       6.748843  \n",
       "1      147.875833       6.161493  \n",
       "2      132.887778       5.536991  \n",
       "3      131.353889       5.473079  \n",
       "4      126.131667       5.255486  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "family_t = final_lifelogs.groupby('family').agg({'tBirth': 'min', 'tDeath': 'max'}).reset_index()\n",
    "family_t['duration_hours'] = (family_t['tDeath'] - family_t['tBirth'])/60/60\n",
    "family_t['duration_days'] = family_t['duration_hours']/24\n",
    "family_t = family_t.sort_values(by='duration_hours', ascending=False).reset_index(drop=True)\n",
    "family_t.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[[<matplotlib.axis.XTick at 0x2b5bfb428d00>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfb428cd0>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfb44c6a0>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfb4b32e0>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfb4b3670>],\n",
       " [Text(-2.0, 0, '0.01'),\n",
       "  Text(-1.0, 0, '0.1'),\n",
       "  Text(0.0, 0, '1.0'),\n",
       "  Text(1.0, 0, '10.0'),\n",
       "  Text(2.0, 0, '100.0')],\n",
       " Text(0.5, 0, 'Family duration (hours)')]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(family_t.duration_hours))\n",
    "log_xticks = ax.get_xticks()\n",
    "log_xticks = log_xticks[1:-1]\n",
    "ax.set(xticks = log_xticks, xticklabels = [10**x for x in log_xticks],\n",
    "       xlabel = 'Family duration (hours)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "min         0.035556\n",
       "max       161.972222\n",
       "median      2.264444\n",
       "Name: duration_hours, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "family_t['duration_hours'].agg(['min', 'max', 'median'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Compute summary statistics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Family size and life expectancy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "life_expectancy = final_lifelogs.groupby('family')['age'].agg(['mean', 'count']).reset_index()\n",
    "ax = sns.distplot(life_expectancy['mean'])\n",
    "ax.set(xlabel = 'Life expectancy by family')\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(life_expectancy['count']))\n",
    "ax.set(xlabel = 'Total family size', xticks=range(5), xticklabels=[10**i for i in range(5)])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ModeResult(mode=array([2]), count=array([885]))"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scipy.stats.mode(life_expectancy['count'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### # of generations (Chain length)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Helper: Read JSON files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "def open_graph(f):\n",
    "    with open(f) as handle:\n",
    "        graph_data = json.load(handle)\n",
    "    return nx.json_graph.node_link_graph(graph_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find longest chain in family graphs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0c52031f3d9447a9284ae001a75c6e1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/6177 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "chain_list = []\n",
    "family_generations = []\n",
    "\n",
    "for f in notebook.tqdm(inc_families):\n",
    "    fam_file = 'outputs/families/families_%s.json' % f\n",
    "    fam_graph = open_graph(fam_file)\n",
    "    fam_chain = nx.algorithms.dag_longest_path(fam_graph)\n",
    "    \n",
    "    eve = re.search(r'(?<=eve-)([0-9]+)', f).group(0)\n",
    "    \n",
    "    chain_list.append((f, len(fam_chain)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>longest_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family  longest_path\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI             3\n",
       "1   time-1573895904_eve-2276911_name-ROHRER             2\n",
       "2     time-1573896101_eve-2276917_name-BADA             5\n",
       "3   time-1573896134_eve-2276919_name-SARINA             9\n",
       "4  time-1573896495_eve-2276927_name-LISSADE            46"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chain_df = pd.DataFrame(chain_list, columns=['family', 'longest_path'])\n",
    "chain_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "min         2.0\n",
       "max       357.0\n",
       "median      5.0\n",
       "Name: longest_path, dtype: float64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chain_df['longest_path'].agg(['min', 'max', 'median'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0, '# of generations'),\n",
       " [<matplotlib.axis.XTick at 0x2b5bda749eb0>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bda749d60>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfb54f550>],\n",
       " [Text(0, 0, '1'), Text(1, 0, '10'), Text(2, 0, '100')]]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(chain_df['longest_path']))\n",
    "ax.set(xlabel = '# of generations', xticks=np.arange(3), xticklabels=[10**x_i for x_i in np.arange(3)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>longest_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5543</th>\n",
       "      <td>time-1609746195_eve-3833245_name-STALLINS</td>\n",
       "      <td>357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5624</th>\n",
       "      <td>time-1611138522_eve-3897231_name-LUCKY</td>\n",
       "      <td>330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5578</th>\n",
       "      <td>time-1610335007_eve-3864700_name-APRIL</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5637</th>\n",
       "      <td>time-1611388293_eve-3906808_name-ARTEMENKO</td>\n",
       "      <td>296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5245</th>\n",
       "      <td>time-1607255144_eve-3661190_name-RED</td>\n",
       "      <td>292</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          family  longest_path\n",
       "5543   time-1609746195_eve-3833245_name-STALLINS           357\n",
       "5624      time-1611138522_eve-3897231_name-LUCKY           330\n",
       "5578      time-1610335007_eve-3864700_name-APRIL           296\n",
       "5637  time-1611388293_eve-3906808_name-ARTEMENKO           296\n",
       "5245        time-1607255144_eve-3661190_name-RED           292"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "chain_df.sort_values(by='longest_path', ascending=False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Modeling success"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Criterion for \"success\": Reaching age 14 (viability fitness)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>14</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>33</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>311</td>\n",
       "      <td>440</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family  sum  count\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI    9     16\n",
       "1   time-1573895904_eve-2276911_name-ROHRER    1      3\n",
       "2     time-1573896101_eve-2276917_name-BADA   14     32\n",
       "3   time-1573896134_eve-2276919_name-SARINA   33     63\n",
       "4  time-1573896495_eve-2276927_name-LISSADE  311    440"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mortality_df = final_lifelogs.copy()\n",
    "mortality_df['adult'] = (mortality_df['age'] >= 14)*1\n",
    "mortality_df = mortality_df[['family', 'avatar', 'adult']]\n",
    "\n",
    "mortality_summ = mortality_df.groupby('family')['adult'].agg(['sum', 'count']).reset_index()\n",
    "mortality_summ['sum'] = mortality_summ['sum'].astype(np.int)\n",
    "mortality_summ.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compute beta distribution for each family\n",
    "\n",
    "Prior: Uniform\n",
    "$$\n",
    "\\theta \\sim \\mathrm{Beta}(\\alpha_0, \\beta_0) \\\\\n",
    "\\alpha_0 = \\beta_0 = 1\n",
    "$$\n",
    "\n",
    "Posterior-sufficient statistics:\n",
    "$$\n",
    "\\theta | D \\sim \\mathrm{Beta}(\\alpha_0 + k, \\beta_0 + N - k) \\\\ \n",
    "a = \\alpha_0 + k \\\\\n",
    "b = \\beta_0 + N - k\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>beta_mean</th>\n",
       "      <th>beta_var</th>\n",
       "      <th>snr</th>\n",
       "      <th>weighted_size</th>\n",
       "      <th>longest_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>time-1573895755_eve-2276905_name-ZABICKI</td>\n",
       "      <td>9</td>\n",
       "      <td>16</td>\n",
       "      <td>12</td>\n",
       "      <td>10</td>\n",
       "      <td>0.545455</td>\n",
       "      <td>0.010780</td>\n",
       "      <td>50.600000</td>\n",
       "      <td>8.727273</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>time-1573895904_eve-2276911_name-ROHRER</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "      <td>0.444444</td>\n",
       "      <td>0.024691</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>1.333333</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>time-1573896101_eve-2276917_name-BADA</td>\n",
       "      <td>14</td>\n",
       "      <td>32</td>\n",
       "      <td>17</td>\n",
       "      <td>21</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>0.006339</td>\n",
       "      <td>70.571429</td>\n",
       "      <td>14.315789</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>time-1573896134_eve-2276919_name-SARINA</td>\n",
       "      <td>33</td>\n",
       "      <td>63</td>\n",
       "      <td>36</td>\n",
       "      <td>33</td>\n",
       "      <td>0.521739</td>\n",
       "      <td>0.003565</td>\n",
       "      <td>146.363636</td>\n",
       "      <td>32.869565</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>time-1573896495_eve-2276927_name-LISSADE</td>\n",
       "      <td>311</td>\n",
       "      <td>440</td>\n",
       "      <td>314</td>\n",
       "      <td>132</td>\n",
       "      <td>0.704036</td>\n",
       "      <td>0.000466</td>\n",
       "      <td>1510.318182</td>\n",
       "      <td>309.775785</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     family  sum  count    a    b  beta_mean  \\\n",
       "0  time-1573895755_eve-2276905_name-ZABICKI    9     16   12   10   0.545455   \n",
       "1   time-1573895904_eve-2276911_name-ROHRER    1      3    4    5   0.444444   \n",
       "2     time-1573896101_eve-2276917_name-BADA   14     32   17   21   0.447368   \n",
       "3   time-1573896134_eve-2276919_name-SARINA   33     63   36   33   0.521739   \n",
       "4  time-1573896495_eve-2276927_name-LISSADE  311    440  314  132   0.704036   \n",
       "\n",
       "   beta_var          snr  weighted_size  longest_path  \n",
       "0  0.010780    50.600000       8.727273             3  \n",
       "1  0.024691    18.000000       1.333333             2  \n",
       "2  0.006339    70.571429      14.315789             5  \n",
       "3  0.003565   146.363636      32.869565             9  \n",
       "4  0.000466  1510.318182     309.775785            46  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def beta_mean(row): return scipy.stats.beta.mean(row['a'], row['b'])\n",
    "def beta_var(row): return scipy.stats.beta.var(row['a'], row['b'])\n",
    "\n",
    "mortality_summ['a'] = 3 + mortality_summ['sum']\n",
    "mortality_summ['b'] = 3 + mortality_summ['count'] - mortality_summ['sum']\n",
    "mortality_summ['beta_mean'] = mortality_summ.apply(beta_mean, axis=1)\n",
    "mortality_summ['beta_var'] = mortality_summ.apply(beta_var, axis=1)\n",
    "mortality_summ['snr'] = mortality_summ['beta_mean']/mortality_summ['beta_var']\n",
    "mortality_summ['weighted_size'] = mortality_summ['beta_mean']*mortality_summ['count']\n",
    "mortality_summ = pd.merge(mortality_summ, chain_df, on = 'family')\n",
    "mortality_summ.to_csv('outputs/family_fitness.tsv', sep='\\t', index=False)\n",
    "mortality_summ.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Compare candidate success measures"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Beta mean:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(mortality_summ['beta_mean'])\n",
    "ax.set(xlabel = 'Mean viability ($\\mu$)')\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distribution of SNR:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(mortality_summ['snr']))\n",
    "ax.set(xlabel='Signal-to-noise ratio ($\\mu/\\sigma$)',\n",
    "       xticks = np.arange(1,5), xticklabels=[10**x for x in np.arange(1,5)])\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distribution of weighted size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[Text(0.5, 0, 'Weighted family size ($\\\\mu N$)'),\n",
       " [<matplotlib.axis.XTick at 0x2b5bfbca0d90>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfbca0b20>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfbc84dc0>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfbaa3460>,\n",
       "  <matplotlib.axis.XTick at 0x2b5bfbaa3970>],\n",
       " [Text(0, 0, '1'),\n",
       "  Text(1, 0, '10'),\n",
       "  Text(2, 0, '100'),\n",
       "  Text(3, 0, '1000'),\n",
       "  Text(4, 0, '10000')]]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(mortality_summ['weighted_size']))\n",
    "ax.set(xlabel='Weighted family size ($\\mu N$)',\n",
    "       xticks=np.arange(0, 5), xticklabels=[10**x for x in np.arange(0, 5)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distribution of # adults:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>beta_mean</th>\n",
       "      <th>beta_var</th>\n",
       "      <th>snr</th>\n",
       "      <th>weighted_size</th>\n",
       "      <th>longest_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3335</th>\n",
       "      <td>time-1594856179_eve-3178148_name-CHARLES</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0.3</td>\n",
       "      <td>0.019091</td>\n",
       "      <td>15.714286</td>\n",
       "      <td>1.2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        family  sum  count  a  b  beta_mean  \\\n",
       "3335  time-1594856179_eve-3178148_name-CHARLES    0      4  3  7        0.3   \n",
       "\n",
       "      beta_var        snr  weighted_size  longest_path  \n",
       "3335  0.019091  15.714286            1.2             2  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mortality_summ[mortality_summ['sum'] ==0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>avatar</th>\n",
       "      <th>player</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>parent</th>\n",
       "      <th>birth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>death</th>\n",
       "      <th>age</th>\n",
       "      <th>cause_of_death</th>\n",
       "      <th>birthX</th>\n",
       "      <th>birthY</th>\n",
       "      <th>deathX</th>\n",
       "      <th>deathY</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>354237</th>\n",
       "      <td>time-1594856179_eve-3178148_name-CHARLES</td>\n",
       "      <td>3178180</td>\n",
       "      <td>3693bb0d002d8b9af7988ac704a5b59fba78a43d</td>\n",
       "      <td>1594856682</td>\n",
       "      <td>3178148</td>\n",
       "      <td>[-18978    -63]</td>\n",
       "      <td>1.594857e+09</td>\n",
       "      <td>[-19151    -88]</td>\n",
       "      <td>6.29</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-18978</td>\n",
       "      <td>-63</td>\n",
       "      <td>-19151.0</td>\n",
       "      <td>-88.0</td>\n",
       "      <td>REEDIE</td>\n",
       "      <td>CHARLES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354238</th>\n",
       "      <td>time-1594856179_eve-3178148_name-CHARLES</td>\n",
       "      <td>3178169</td>\n",
       "      <td>034bf43fd22eeba37603031c71437958c2bd6694</td>\n",
       "      <td>1594856528</td>\n",
       "      <td>3178148</td>\n",
       "      <td>[-18952    -65]</td>\n",
       "      <td>1.594857e+09</td>\n",
       "      <td>[-19120    -80]</td>\n",
       "      <td>8.46</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-18952</td>\n",
       "      <td>-65</td>\n",
       "      <td>-19120.0</td>\n",
       "      <td>-80.0</td>\n",
       "      <td>MOON</td>\n",
       "      <td>CHARLES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354239</th>\n",
       "      <td>time-1594856179_eve-3178148_name-CHARLES</td>\n",
       "      <td>3178151</td>\n",
       "      <td>3693bb0d002d8b9af7988ac704a5b59fba78a43d</td>\n",
       "      <td>1594856219</td>\n",
       "      <td>3178148</td>\n",
       "      <td>[-19088    -54]</td>\n",
       "      <td>1.594857e+09</td>\n",
       "      <td>[-18979    -56]</td>\n",
       "      <td>5.59</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-19088</td>\n",
       "      <td>-54</td>\n",
       "      <td>-18979.0</td>\n",
       "      <td>-56.0</td>\n",
       "      <td>ROSE</td>\n",
       "      <td>CHARLES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>354240</th>\n",
       "      <td>time-1594856179_eve-3178148_name-CHARLES</td>\n",
       "      <td>3178150</td>\n",
       "      <td>cbd38b7f6a5e1fc1cc47bf30ccda1ed9d0cc8c89</td>\n",
       "      <td>1594856209</td>\n",
       "      <td>3178148</td>\n",
       "      <td>[-19093    -65]</td>\n",
       "      <td>1.594857e+09</td>\n",
       "      <td>[-18977    -64]</td>\n",
       "      <td>8.57</td>\n",
       "      <td>hunger</td>\n",
       "      <td>-19093</td>\n",
       "      <td>-65</td>\n",
       "      <td>-18977.0</td>\n",
       "      <td>-64.0</td>\n",
       "      <td>GEM</td>\n",
       "      <td>CHARLES</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          family   avatar  \\\n",
       "354237  time-1594856179_eve-3178148_name-CHARLES  3178180   \n",
       "354238  time-1594856179_eve-3178148_name-CHARLES  3178169   \n",
       "354239  time-1594856179_eve-3178148_name-CHARLES  3178151   \n",
       "354240  time-1594856179_eve-3178148_name-CHARLES  3178150   \n",
       "\n",
       "                                          player      tBirth   parent  \\\n",
       "354237  3693bb0d002d8b9af7988ac704a5b59fba78a43d  1594856682  3178148   \n",
       "354238  034bf43fd22eeba37603031c71437958c2bd6694  1594856528  3178148   \n",
       "354239  3693bb0d002d8b9af7988ac704a5b59fba78a43d  1594856219  3178148   \n",
       "354240  cbd38b7f6a5e1fc1cc47bf30ccda1ed9d0cc8c89  1594856209  3178148   \n",
       "\n",
       "                  birth        tDeath            death   age cause_of_death  \\\n",
       "354237  [-18978    -63]  1.594857e+09  [-19151    -88]  6.29         hunger   \n",
       "354238  [-18952    -65]  1.594857e+09  [-19120    -80]  8.46         hunger   \n",
       "354239  [-19088    -54]  1.594857e+09  [-18979    -56]  5.59         hunger   \n",
       "354240  [-19093    -65]  1.594857e+09  [-18977    -64]  8.57         hunger   \n",
       "\n",
       "        birthX  birthY   deathX  deathY   first     last  \n",
       "354237  -18978     -63 -19151.0   -88.0  REEDIE  CHARLES  \n",
       "354238  -18952     -65 -19120.0   -80.0    MOON  CHARLES  \n",
       "354239  -19088     -54 -18979.0   -56.0    ROSE  CHARLES  \n",
       "354240  -19093     -65 -18977.0   -64.0     GEM  CHARLES  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_lifelogs[final_lifelogs.family == 'time-1594856179_eve-3178148_name-CHARLES']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>player</th>\n",
       "      <th>avatar</th>\n",
       "      <th>tBirth</th>\n",
       "      <th>parent</th>\n",
       "      <th>birth</th>\n",
       "      <th>tDeath</th>\n",
       "      <th>death</th>\n",
       "      <th>age</th>\n",
       "      <th>cause_of_death</th>\n",
       "      <th>birthX</th>\n",
       "      <th>birthY</th>\n",
       "      <th>deathX</th>\n",
       "      <th>deathY</th>\n",
       "      <th>first</th>\n",
       "      <th>last</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>482519</th>\n",
       "      <td>b0bf435c1dd467204a8075898e64fe6f844c5064</td>\n",
       "      <td>3178148</td>\n",
       "      <td>1594856179</td>\n",
       "      <td>-1</td>\n",
       "      <td>[-19103    -47]</td>\n",
       "      <td>1.594857e+09</td>\n",
       "      <td>[-19218    -68]</td>\n",
       "      <td>29.92</td>\n",
       "      <td>disconnect</td>\n",
       "      <td>-19103</td>\n",
       "      <td>-47</td>\n",
       "      <td>-19218.0</td>\n",
       "      <td>-68.0</td>\n",
       "      <td>EVE</td>\n",
       "      <td>CHARLES</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                          player   avatar      tBirth  parent  \\\n",
       "482519  b0bf435c1dd467204a8075898e64fe6f844c5064  3178148  1594856179      -1   \n",
       "\n",
       "                  birth        tDeath            death    age cause_of_death  \\\n",
       "482519  [-19103    -47]  1.594857e+09  [-19218    -68]  29.92     disconnect   \n",
       "\n",
       "        birthX  birthY   deathX  deathY first     last  \n",
       "482519  -19103     -47 -19218.0   -68.0   EVE  CHARLES  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_eras[all_eras.avatar == 3178148]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/pandas/core/arraylike.py:358: RuntimeWarning: divide by zero encountered in log10\n",
      "  result = getattr(ufunc, method)(*inputs, **kwargs)\n",
      "/n/home15/nvelezalicea/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py:2557: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "ename": "OverflowError",
     "evalue": "cannot convert float infinity to integer",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOverflowError\u001b[0m                             Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-33-38886744a8ec>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdistplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog10\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmortality_summ\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'sum'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'# of adults'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxticklabels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36mdistplot\u001b[0;34m(a, bins, hist, kde, rug, fit, hist_kws, kde_kws, rug_kws, fit_kws, color, vertical, norm_hist, axlabel, label, ax, x)\u001b[0m\n\u001b[1;32m   2610\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhist\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2611\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mbins\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2612\u001b[0;31m             \u001b[0mbins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_freedman_diaconis_bins\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m50\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2613\u001b[0m         \u001b[0mhist_kws\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"alpha\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2614\u001b[0m         \u001b[0mhist_kws\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"density\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnorm_hist\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.conda/envs/py3/lib/python3.9/site-packages/seaborn/distributions.py\u001b[0m in \u001b[0;36m_freedman_diaconis_bins\u001b[0;34m(a)\u001b[0m\n\u001b[1;32m   2401\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2402\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2403\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2404\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2405\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mOverflowError\u001b[0m: cannot convert float infinity to integer"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = sns.distplot(np.log10(mortality_summ['sum']))\n",
    "ax.set(xlabel='# of adults', xticks = np.arange(0,5), xticklabels=[10**x for x in np.arange(0,5)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Plot representative families"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Split data into quartiles:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "success = 'sum' # Success metric\n",
    "mortality_summ['quantile'] = pd.qcut(mortality_summ[success], 4, labels=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are the quantiles?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "success_q = scipy.stats.mstats.mquantiles(mortality_summ[success], prob=[0.25, 0.5, 0.75, 1])\n",
    "mortality_summ['log_n'] = np.log10(mortality_summ['sum'])\n",
    "\n",
    "# Plot!\n",
    "q_log = np.log10(success_q)\n",
    "plt.figure(figsize=(12,4))\n",
    "for q in q_log:\n",
    "    plt.axvline(q, color='#aaaaaa', linestyle='--')\n",
    "\n",
    "ax = sns.distplot(mortality_summ['log_n'])\n",
    "ax.set_xticks(range(5))\n",
    "labels = [10**t for t in ax.get_xticks()]\n",
    "ax.set(xlabel='# of adults', xticklabels=labels)\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot representative family trees from each quartile:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.random.seed(526)\n",
    "representative_families = np.array([np.random.choice(group['family'], 10) \n",
    "                                    for name,group in mortality_summ.groupby('quantile')])\n",
    "rep_list = np.array(representative_families)\n",
    "rep_list = rep_list.flatten()\n",
    "\n",
    "rep_info = mortality_summ.copy()\n",
    "rep_info = rep_info[rep_info['family'].isin(rep_list)]\n",
    "rep_info = rep_info.reset_index(drop=True)\n",
    "rep_info = rep_info.sort_values('quantile')\n",
    "rep_info.to_csv('plots/fitness_quantiles/selected_families.tsv', sep='\\t', index=None)\n",
    "rep_info.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "for quant in notebook.tqdm(range(4)):\n",
    "    for f in notebook.tqdm(representative_families[quant]):\n",
    "        fam_file = 'outputs/families/families_%s.json' % f\n",
    "        out_file = 'plots/fitness_quantiles/families_Q%i_%s.png' % (quant+1, f)\n",
    "\n",
    "        # Load graph and remove infant deaths\n",
    "        fam_graph = open_graph(fam_file)\n",
    "\n",
    "        # Figure size (based on graphviz layout)\n",
    "        nx.nx_agraph.write_dot(fam_graph,'fam.dot')\n",
    "        pos=graphviz_layout(fam_graph, prog='dot')\n",
    "        pos_coords = pd.DataFrame(list(pos.values()), columns=['x','y']).agg(['max', 'min'])\n",
    "        w = (pos_coords.loc['max', 'x'] - pos_coords.loc['min', 'x'])/150\n",
    "        h = (pos_coords.loc['max', 'y'] - pos_coords.loc['min', 'y'])/150\n",
    "\n",
    "        # Adjust for 2-member families\n",
    "        w = max(w, 2)\n",
    "        h = max(h, 2)\n",
    "\n",
    "        # Node color (based on whether individuals reached maturity)\n",
    "        fam_nodes = list(fam_graph.nodes)\n",
    "        fam_nodes = [int(n) for n in fam_nodes]\n",
    "\n",
    "        fam_attr = mortality_df[['avatar', 'adult']].copy()\n",
    "        fam_attr = fam_attr[fam_attr['avatar'].isin(fam_nodes)]\n",
    "        fam_attr = fam_attr.set_index('avatar')\n",
    "        fam_attr = fam_attr.to_dict()\n",
    "        \n",
    "        fam_color = []\n",
    "        for n in fam_nodes:\n",
    "            if n in infant_deaths:\n",
    "                fam_color.append('#cccccc')\n",
    "            else:\n",
    "                if fam_attr['adult'][n] == 1:\n",
    "                    fam_color.append('#4ab1ff')\n",
    "                else:\n",
    "                    fam_color.append('#4ab1ff')\n",
    "\n",
    "#         fam_color = [fam_attr['adult'][n] == 1 for n in fam_nodes]\n",
    "#         fam_color = ['#4ab1ff' if c else '#cccccc' for c in fam_color]\n",
    "\n",
    "        plt.figure(3,figsize=(w,h)) \n",
    "        nx.draw(fam_graph, pos, with_labels=False, arrows=True, node_color=fam_color)\n",
    "        plt.savefig(out_file, transparent=True)\n",
    "        plt.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plots for talk"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div style='background-color:red;color:white;'>TODO: The plots below should be moved elsewhere to preserve order!</div>\n",
    "Relationship between family and repertoire size:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rep_df = pd.read_csv('../3_technology/outputs/family_repertoire.tsv', sep='\\t')\n",
    "rep_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "family_n = mortality_summ[['family','sum', 'log_n']]\n",
    "family_rep = rep_df[['family', 'breadth','log_breadth']]\n",
    "n_rep = pd.merge(family_n, family_rep, on='family')\n",
    "n_rep.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Max items possible?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "item_df = pd.read_csv('../4_techtree/num_unique_ingredients.csv')\n",
    "n_items = len(item_df)\n",
    "print('# items: %i' % n_items)\n",
    "item_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Distribution of repertoire sizes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "rep_q = scipy.stats.mstats.mquantiles(rep_df['log_breadth'], prob=[0.25, 0.5, 0.75, 1])\n",
    "print(rep_q)\n",
    "\n",
    "plt.figure(figsize=(12,4))\n",
    "# for q in rep_q:\n",
    "#     plt.axvline(q, color='#aaaaaa', linestyle='--')\n",
    "#plt.axvspan(0, q_log[0], alpha=0.5, color='red') \n",
    "\n",
    "ax = sns.distplot(rep_df['log_breadth'], bins=20)\n",
    "ax.set_xlim(left=0)\n",
    "ax.set_xticks(range(5))\n",
    "plt.axvline(np.log10(n_items), linestyle='--', color = '#f5a442')\n",
    "labels = [10**t for t in ax.get_xticks()]\n",
    "ax.set(xlabel='Repertoire size', xticklabels=labels)\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "g = sns.jointplot(data=n_rep, x='log_breadth', y='log_n', kind='reg', lowess=True,\n",
    "                  marginal_kws={'bins':20},\n",
    "                  scatter_kws={'alpha':0.01, 'color': '#A5C8E1'})\n",
    "ticks = np.arange(4)\n",
    "tick_labels = [10**t for t in ticks]\n",
    "g.ax_joint.set(xticks = ticks, yticks = ticks,\n",
    "               xticklabels = tick_labels, yticklabels = tick_labels,\n",
    "               xlabel='Viability',\n",
    "               ylabel='Repertoire size')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gini_df = pd.read_csv('../3_technology/outputs/family_gini.tsv', sep='\\t')\n",
    "gini_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "gini_rep = pd.merge(gini_df, rep_df, on='family')\n",
    "gini_rep.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure(figsize=(6,6))\n",
    "ax = sns.regplot(x='gini', y='log_breadth', data=gini_rep,\n",
    "                 scatter_kws={'alpha': 0.05, 'color': '#A5C8E1'}, \n",
    "                 line_kws = {'color': '#2276B4'}, lowess=True)\n",
    "yticks =  np.arange(0,5)\n",
    "ax.set_yticks(yticks)\n",
    "yticklabels = [10**y for y in yticks]\n",
    "ax.set(xlabel = 'Innovation inequality (G)',\n",
    "       xlim = (0,1),\n",
    "       ylabel = 'Repertoire size',\n",
    "       yticklabels=yticklabels)\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(7,5))\n",
    "equal_dist = np.array([0,1,2,3,4])\n",
    "ax = sns.distplot(equal_dist, kde=False, hist_kws={'density': False}, bins=5)\n",
    "ax.set(xlim = (0,11), ylim = (0,5),\n",
    "       xticks = np.arange(0,11),\n",
    "       yticks = np.arange(6),\n",
    "       xlabel='# discoveries',\n",
    "       ylabel='# players')\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Living population size over time\n",
    "<div style='background-color:red;color:white;'>TODO: The plots below should be moved elsewhere to narrow the scope of this notebook!</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "living_list = []\n",
    "for fam in notebook.tqdm(inc_families):\n",
    "    fam_df = final_lifelogs[final_lifelogs['family'] == fam].copy().reset_index(drop=True)\n",
    "    t = fam_df['tBirth'].values\n",
    "    for ti in t:\n",
    "        is_alive = (fam_df['tBirth'] <= ti) & (fam_df['tDeath'] > ti)\n",
    "        pop = np.sum(is_alive)\n",
    "        living_list.append((fam, ti, pop))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "living_df = pd.DataFrame(living_list, columns = ['family', 't', 'population'])\n",
    "living_df = living_df.sort_values(by=['family', 't'], ascending=True).reset_index(drop=True)\n",
    "living_df['t0'] = living_df.groupby('family')['t'].transform('first')\n",
    "living_df['t_elapsed'] = (living_df['t'] - living_df['t0'])/60/60\n",
    "living_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot a subset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "np.random.seed(526)\n",
    "random_families = np.random.choice(inc_families, size=10, replace=False)\n",
    "random_subset = living_df[living_df['family'].isin(random_families)]\n",
    "g = sns.relplot(data=random_subset, x='t_elapsed', y='population', hue='family', kind='line',\n",
    "                 height=6, aspect=2, alpha = 0.5)\n",
    "g.set(xlabel = 'Time elapsed (hours)', ylabel = 'Population size')\n",
    "g._legend.remove()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Maximum population size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_pop = living_df.groupby('family')['population'].agg('max').reset_index()\n",
    "ax = sns.distplot(max_pop['population'])\n",
    "ax.set(xlabel = 'Maximum living population size')\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "max_pop['population'].agg(['min', 'max', 'median'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
